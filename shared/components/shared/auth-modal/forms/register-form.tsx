'use client';

import { registerUser } from '@/app/actions';
import { Button } from '@/shared/components/ui';
import { zodResolver } from '@hookform/resolvers/zod';
import { FC } from 'react';
import { FormProvider, useForm } from 'react-hook-form';
import toast from 'react-hot-toast';
import { FormInput } from '../../form/form-input';
import { formRegisterSchema, TFormRegister } from './schema';

export interface Props {
    onClose?: () => void;
}

export const RegisterForm: FC<Props> = ({ onClose }) => {
    const form = useForm<TFormRegister>({
        resolver: zodResolver(formRegisterSchema),
        defaultValues: {
            email: '',
            password: '',
            fullName: '',
            confirmPassword: '',
        },
        mode: 'onChange',
    });

    const onSubmit = async (data: TFormRegister) => {
        try {
            await registerUser({
                email: data.email,
                fullName: data.fullName,
                password: data.password,
            });

            toast.success('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üìù');

            onClose?.();
        } catch (error) {
            return toast.error('–ù–µ–≤–µ—Ä–Ω—ã–π E-Mail –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
        }
    };
    return (
        <FormProvider {...form}>
            <form
                className="flex flex-col gap-5"
                onSubmit={form.handleSubmit(onSubmit)}
            >
                <FormInput
                    name="email"
                    label="E-Mail"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É"
                    required
                />
                <FormInput
                    name="fullName"
                    label="–ü–æ–ª–Ω–æ–µ –∏–º—è"
                    required
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é"
                />
                <FormInput
                    name="password"
                    label="–ü–∞—Ä–æ–ª—å"
                    type="password"
                    required
                    placeholder="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å"
                />
                <FormInput
                    name="confirmPassword"
                    label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                    type="password"
                    required
                    placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                />

                <Button
                    loading={form.formState.isSubmitting}
                    className="h-12 text-base"
                    type="submit"
                >
                    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                </Button>
            </form>
        </FormProvider>
    );
};
